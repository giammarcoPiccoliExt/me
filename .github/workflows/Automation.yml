name: Automatic doc update

on:
  push:
    branches:
    - main

env:
  RUN_CHECKOUT: 'true'
  RUN_SETUP: 'true'
  RUN_FETCH_HISTORY: 'true'
  RUN_SWAGGER: 'true'
  RUN_VERSIONING: 'true'
  RUN_BUILD_DOCS: 'true'
  RUN_GENERATE_PDF: 'true'
  RUN_DEPLOY_DOCS: 'true'

jobs:
  doc_pipeline:
    runs-on: ubuntu-22.04
    steps:

    - name: Checkout repository
      if: env.RUN_CHECKOUT == 'true'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python
      if: env.RUN_SETUP == 'true'
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      if: env.RUN_SETUP == 'true'
      run: pip install -r  preConfiguration/requirements.txt

    - name: Set Git user
      if: env.RUN_SETUP == 'true'
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Fetch all history
      if: env.RUN_FETCH_HISTORY == 'true'
      run: git fetch --all

    - name: Fetch gh-pages branch
      if: env.RUN_FETCH_HISTORY == 'true'
      run: |
        git fetch origin gh-pages
        git checkout origin/gh-pages -- latest

    - name: Check if 'latest' is a symlink or a directory
      if: env.RUN_FETCH_HISTORY == 'true'
      run: ls -l latest

    - name: Determine next version
      if: env.RUN_VERSIONING == 'true'
      id: versioning
      run: |
        latest_version=$(readlink latest)
        echo "Latest version: $latest_version"

        anno=7
        last_mese=$(echo "$latest_version" | awk -F. '{print $2}')
        last_patch=$(echo "$latest_version" | awk -F. '{print $3}')

        mese=$(date +'%m')

        if [ "$mese" != "$last_mese" ]; then
          nuova_patch=0
        else
          nuova_patch=$((last_patch + 1))
        fi

        nuova_versione="${anno}.${mese}.${nuova_patch}"
        echo "Calcolata nuova versione: $nuova_versione"

        echo "new_version=$nuova_versione" >> $GITHUB_ENV
        echo "new_version=$nuova_versione" >> $GITHUB_OUTPUT

    - name: Build mkdocs config
      run: python preConfiguration/build_config.py

    - name: Build PDF config
      run: python preConfiguration/pdf_config.py

    - name: Build documentation
      if: env.RUN_BUILD_DOCS == 'true'
      run: mkdocs build

    - name: Renumber figcaptions
      run: |
        pip install beautifulsoup4
        python pdfGeneration/figureEnumerator.py site/print_page.html

    - name: Install wkhtmltopdf
      run: |
        wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.5/wkhtmltox_0.12.5-1.focal_amd64.deb
        sudo apt install -y ./wkhtmltox_0.12.5-1.focal_amd64.deb
      # SCARICARE QUESTA VERSIONE SENZA BUG? SIMIL DP

    - name: Generate PDF
      if: env.RUN_GENERATE_PDF == 'true'
      run: |
        wkhtmltopdf \
          --enable-local-file-access \
          --enable-javascript \
          --javascript-delay 1000 \
          --print-media-type \
          --disable-smart-shrinking \
          --dpi 200 \
          --encoding UTF-8 \
          --header-html "file://$(pwd)/pdfGeneration/pdf-header.html" \
          --footer-html "file://$(pwd)/pdfGeneration/pdf-footer.html" \
          --user-style-sheet "file://$(pwd)/pdfGeneration/pdf-leonardo.css" \
          --footer-spacing 10 \
          --header-spacing 10 \
          --margin-top 51.317 \
          --margin-bottom 33.56 \
          --margin-left 19.138 \
          --margin-right 13 \
          "file://$(pwd)/pdfGeneration/pdf-firstPage.html" \
          "file://$(pwd)/site/print_page.html" \
          "$(pwd)/docs/personalization/SCMP_SUM.pdf"

    - name: Login API(EDIT)
      if: env.RUN_SWAGGER == 'true'
      id: api_login
      run: |
        response=$(curl -s --location 'https://www.movincloud.com//api/iam/login' \
        -H "Content-Type: application/json" \
        -d '{
              "user": "cmp_api_test",
              "psw": "${{ secrets.PSW }}",
              "get_routes": true,
              "routes_for_module": "IAM/IAM_FE",
              "app_to_use": "TUTTE",
              "iam_fe_login": true,
              "error_on_iam_routes": false
            }')


        token=$(echo "$response" | jq -r '.access_token')
        if [ "$token" == "null" ] || [ -z "$token" ]; then
          echo "Login fallita: token non ricevuto"
          exit 1
        fi

        echo "::add-mask::$token"
        echo "API_TOKEN=$token" >> $GITHUB_ENV
        echo "api_token=$token" >> $GITHUB_OUTPUT

    - name: GET authenticated APIs and save JSON for Swagger (EDIT)
      if: env.RUN_SWAGGER == 'true'
      run: |
        API_TOKEN=${{ steps.api_login.outputs.api_token }}
        VARS=("finops" "provisioning" "rm" "abs" "rmreport" "rmcosts" "rmmonitoring" "rmsecurity" "rmservice" "siem" "txm" "tenant")
        for var in "${VARS[@]}"; do
          echo "ðŸ”„ Fetching Swagger for API: $var"
          HTTP_RESPONSE=$(curl --location --silent --show-error --write-out "HTTPSTATUS:%{http_code}" \
            -H "Authorization: Bearer $API_TOKEN" \
            -H "x-Tenant: Default"\
            "https://www.movincloud.com/api/${var}/v3/api-docs" \
            -o "docs/${var}Swagger.json")

          HTTP_BODY=$(cat docs/${var}Swagger.json)
          HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          echo "âœ… API: $var"
          echo "ðŸ”¢ HTTP Status: $HTTP_STATUS"
          echo "ðŸ“„ Response preview: $(echo "$HTTP_BODY" | head -c 200)..."
          echo "-------------------------------"
        done

    - name: Deploy docs with Mike
      if: env.RUN_DEPLOY_DOCS == 'true'
      run: mike deploy --push --update-aliases ${{ env.new_version }} latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
